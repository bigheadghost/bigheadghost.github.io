<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Reading and Thinking</title>
    <link>https://bigheadghost.github.io/post/</link>
    <description>Recent content in Posts on Reading and Thinking</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 09 Sep 2014 12:05:23 +0800</lastBuildDate>
    
	<atom:link href="https://bigheadghost.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dive into Project Euler Part 5 (81-100)</title>
      <link>https://bigheadghost.github.io/post/dive-into-project-euler-part-5-81-100/</link>
      <pubDate>Tue, 09 Sep 2014 12:05:23 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/dive-into-project-euler-part-5-81-100/</guid>
      <description>&lt;h1 id=&#34;problem-81&#34;&gt;Problem 81&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;s = Import[&amp;quot;p081_matrix.txt&amp;quot;, &amp;quot;Data&amp;quot;];
Clear@MinPathSum;
MinPathSum[1, 1] := s[[1, 1]]
MinPathSum[r_, c_] := MinPathSum[r, c] =
   If[r == 1, MinPathSum[r, c - 1],
     If[c == 1, MinPathSum[r - 1, c],
      Min[MinPathSum[r - 1, c], MinPathSum[r, c - 1]]]] + s[[r, c]];
MinPathSum[80, 80]
427337
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dive into Project Euler Part 4 (61-80)</title>
      <link>https://bigheadghost.github.io/post/dive-into-project-euler-part-4-61-80/</link>
      <pubDate>Tue, 02 Sep 2014 16:14:41 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/dive-into-project-euler-part-4-61-80/</guid>
      <description>&lt;h1 id=&#34;problem-61&#34;&gt;Problem 61&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;LEN=6
numbers=[[] for row in range(LEN)]
solution=[0]*LEN
for i in range(200):
    if(1000&amp;lt;=i*(i+1)/2&amp;lt;10000):
        numbers[0].append(int(i*(i+1)/2))
    if(1000&amp;lt;=i*i&amp;lt;10000):
        numbers[1].append(i*i)
    if(1000&amp;lt;=i*(3*i-1)/2&amp;lt;10000):
        numbers[2].append(int(i*(3*i-1)/2))
    if(1000&amp;lt;=i*(2*i-1)&amp;lt;10000):
        numbers[3].append(i*(2*i-1))           
    if(1000&amp;lt;=i*(5*i-3)/2&amp;lt;10000):
        numbers[4].append(int(i*(5*i-3)/2))
    if(1000&amp;lt;=i*(3*i-2)&amp;lt;10000):
        numbers[5].append(i*(3*i-2))
 
def FindNext(last, length):
    for i in range(LEN):
        if (solution[i] == 0):
            for j in range(len(numbers[i])):
                if(numbers[i][j] not in solution and ((numbers[i][j] // 100) == (solution[last] % 100))):
                    solution[i] = numbers[i][j]
                    if (length == 5):
                        if (solution[5] // 100 == solution[i] % 100):
                            return True
                    elif (FindNext(i, length + 1)):
                        return True
 
            solution[i] = 0  #backforce
    return  False
 
for i in range(len(numbers[5])):
    solution[5]=numbers[5][i]
    if(FindNext(5, 1)):       
        print(solution, sum(solution))
        break

[8256, 5625, 2882, 8128, 2512, 1281] 28684
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dive into Project Euler Part 3 (41-60)</title>
      <link>https://bigheadghost.github.io/post/dive-into-project-euler-part-3-41-60/</link>
      <pubDate>Tue, 02 Sep 2014 12:04:41 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/dive-into-project-euler-part-3-41-60/</guid>
      <description>&lt;h1 id=&#34;problem-41&#34;&gt;Problem 41&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Max@Table[ Select[FromDigits /@ Permutations[Range[i]], PrimeQ], {i, 9}]
7652413
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-42&#34;&gt;Problem 42&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;s = (Total[ToCharacterCode[#] - First@ToCharacterCode[&amp;quot;A&amp;quot;] + 1]) &amp;amp; /@ StringSplit[StringReplace[Import[&amp;quot;R:\\words.txt&amp;quot;], &amp;quot;\&amp;quot;&amp;quot; -&amp;gt; &amp;quot;&amp;quot;],   &amp;quot;,&amp;quot;];
Reduce[n*(n + 1)/2 &amp;gt;Max[s] &amp;amp;&amp;amp; n &amp;gt; 0, n, Integers]
n &amp;gt;= 20
In[37]:= tn = Array[#*(# + 1)/2 &amp;amp;, 20];
In[38]:= Select[s, MemberQ[tn, #] &amp;amp;] // Length
Out[38]= 162
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-43&#34;&gt;Problem 43&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;cf = With[{
    code =
     And @@ Thread[
         Table[100 A[[i]] + 10 A[[i + 1]] + A[[i + 2]], {i, 2, 8}]~
           Mod~{2, 3, 5, 7, 11, 13, 17} == 0] // Boole // Quiet
    },
   Compile[{ {A, _Integer, 1} },
    code,
    RuntimeAttributes -&amp;gt; Listable,
    RuntimeOptions -&amp;gt; &amp;quot;Speed&amp;quot;, CompilationTarget -&amp;gt; &amp;quot;C&amp;quot;
    ]
   ];
FromDigits /@ Pick[#, cf@#, 1] &amp;amp;@Permutations@Range[0, 9] // Tr
16695334890
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dive into Project Euler Part 2 (21-40)</title>
      <link>https://bigheadghost.github.io/post/dive-into-project-euler-part-2-21-40/</link>
      <pubDate>Fri, 29 Aug 2014 12:07:32 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/dive-into-project-euler-part-2-21-40/</guid>
      <description>&lt;h1 id=&#34;problem-21&#34;&gt;Problem 21&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;f = DivisorSigma[1, #] - # &amp;amp;;
Total@Select[Range[9999], (a = f@#; a &amp;lt; 9999 &amp;amp;&amp;amp; a != # &amp;amp;&amp;amp; f@a == #) &amp;amp;]
31626
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-22&#34;&gt;Problem 22&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;nl=Sort@StringSplit[StringReplace[Import[&amp;quot;p022_names.txt&amp;quot;], &amp;quot;\&amp;quot;&amp;quot; -&amp;gt; &amp;quot;&amp;quot;], &amp;quot;,&amp;quot;];
Total@MapIndexed[Total[ToCharacterCode[#1] - First[ToCharacterCode[&amp;quot;A&amp;quot;]] + 1] * First[#2] &amp;amp;, nl]
871198282
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-23&#34;&gt;Problem 23&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Abundants = Select[Range[1, 28123], DivisorSigma[1, #] - # &amp;gt; # &amp;amp;];
Total@Complement[Range[1, 28123],
  DeleteDuplicates@(   (Abundants[[#]] + Abundants[[# ;; -1]]) &amp;amp; /@ Range[Length@Abundants] // Flatten  )]
4179871
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-24&#34;&gt;Problem 24&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FromDigits[Permutations[Range[0, 9], {10}][[1*^6]]]
2783915460
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-25&#34;&gt;Problem 25&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;NestWhile[(# + 1) &amp;amp;, 1, IntegerLength@Fibonacci@# &amp;lt; 1000 &amp;amp;]
4782
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dive into Project Euler Part 1 (1-20)</title>
      <link>https://bigheadghost.github.io/post/dive-into-project-euler-part-1-1-20/</link>
      <pubDate>Fri, 29 Aug 2014 08:41:09 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/dive-into-project-euler-part-1-1-20/</guid>
      <description>&lt;p&gt;Although calculation of mathematica codes could be slower than those written in C/C++, or even those in python, the prodigious and interesting if not funny functions do save coding time a lot.&lt;/p&gt;

&lt;h1 id=&#34;problem-1&#34;&gt;Problem 1&lt;/h1&gt;

&lt;p&gt;Brute force solution at first thought:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total@Select[Range[999], 3\[Divides]# || 5\[Divides]# &amp;amp;]
233168
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if the upper limit is extreme large, like \(10^{10}\), or \(10^{10^7}\)? Calculating one after another or even saving them using Range is impossible. Here comes the mathematical way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;top = 10^(10^7) - 1;
SumMultiplesOf[n_] := (p = Quotient[top, n]; n*p*(p + 1)/2);
SumMultiplesOf[m_, n_] := SumMultiplesOf[m] + SumMultiplesOf[n] - SumMultiplesOf[LCM[m, n]];
N[SumMultiplesOf[3, 5], 2] // AbsoluteTiming
{2.222280, 2.3*10^19999999}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-2&#34;&gt;Problem 2&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;n=NestWhile[# + 1 &amp;amp;, 1, Fibonacci@# &amp;lt;= 4*^6 &amp;amp;] - 1
Total@Select[Array[Fibonacci,n] ,  EvenQ]
4613732
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even numbers appear every 3rd positions in Fibonacci series:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total@Table[Fibonacci@i, {i, 3, n, 3}]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-3&#34;&gt;Problem 3&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Max[FactorInteger[600851475143][[All, 1]]]
6857
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-4&#34;&gt;Problem 4&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;Catch@Scan[If[FromDigit@Reverse@IntegerDigits@# == #, Throw[#]] &amp;amp;, Reverse@Sort@Flatten@Table[i*j, {i, 999, 100, -1}, {j, i, 100, -1}]]
906609
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;problem-5&#34;&gt;Problem 5&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;LCM @@ Range[20]
232792560
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PythonChallenge Solutions Using Mathematica</title>
      <link>https://bigheadghost.github.io/post/pythonchallenge-solutions-using-mathematica/</link>
      <pubDate>Fri, 11 Jul 2014 20:40:02 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/pythonchallenge-solutions-using-mathematica/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/map.html&#34;&gt;Level 1&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a = CharacterRange[&amp;quot;a&amp;quot;, &amp;quot;z&amp;quot;]; StringJoin[Characters[s] /. Thread[a -&amp;gt; RotateLeft[a, 2]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/ocr.html&#34;&gt;Level 2&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Sort[Tally[Characters[s]], #1[[2]] &amp;lt;= #2[[2]] &amp;amp;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/equality.html&#34;&gt;Level 3&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;StringJoin[StringCases[s,RegularExpression[&amp;quot;[^A-Z][A-Z]{3}([a-z])[A-Z]{3}[^A-Z]&amp;quot;] -&amp;gt;  &amp;quot;$1&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Level 4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NestWhileList[(resp = Import[&amp;quot;http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&amp;quot;&amp;lt;&amp;gt;#];
   m = StringCases[resp ,&amp;quot;next nothing is &amp;quot; ~~ (x : DigitCharacter ..) -&amp;gt; x];
   If[m != {}, m[[1]], Print[resp]; &amp;quot;&amp;quot;]) &amp;amp;,
&amp;quot;12345&amp;quot;,
StringLength[#] &amp;gt; 0 &amp;amp;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;16044-&amp;gt;8022, continue&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/peak.html&#34;&gt;Level 5&lt;/a&gt;:&lt;br /&gt;
pickle module needed, python only.&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&#34;http://www.pythonchallenge.com/pc/def/channel.html&#34;&gt;Level 6&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mummy Maze Solver</title>
      <link>https://bigheadghost.github.io/post/mummy-maze-solver/</link>
      <pubDate>Wed, 02 Jul 2014 10:17:48 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/mummy-maze-solver/</guid>
      <description>&lt;p&gt;Mummy Maze is a game created by &lt;a href=&#34;http://www.popcap.com/&#34;&gt;PopCap&lt;/a&gt; in 2002. It is based on &lt;a href=&#34;http://www.logicmazes.com/&#34;&gt;Robert Abbott&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;http://www.logicmazes.com/theseus.html&#34;&gt;Theseus maze&lt;/a&gt;. There are 3 scales of lattices: 6*6, 8*8, 10*10. With white mummy functioning as Minotaur, Mummy Maze introduced many varieties: red mummy, scorpion, trap, gate and key. There is only one Minotaur in the original Theseus maze, while the explorer in Mummy Maze faces more enemies.&lt;/p&gt;

&lt;p&gt;If solutions are all you want, please visit this &lt;a href=&#34;http://www.gamefaqs.com/pc/932088-mummy-maze-deluxe/faqs/42610&#34;&gt;Complete Walktrough&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The 14th puzzle in Pharaoh&amp;rsquo;s Tomb, has the solution with the most moves, 66 steps.&lt;br /&gt;
&lt;img src=&#34;http://pic.yupoo.com/lavender/DSi5o6ZR/W5CZL.jpg&#34; alt=&#34;mummy maze demo&#34; /&gt;&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frog Mania</title>
      <link>https://bigheadghost.github.io/post/frog-mania/</link>
      <pubDate>Wed, 25 Jun 2014 14:14:28 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/frog-mania/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.bigfishgames.com/online-games/18111/frog-mania/index.html&#34;&gt;Frog Mania&lt;/a&gt; is a flash game. It is quite easy to play, so this is not about its solver, but the way to get the underlying matrix representation of each level.&lt;br /&gt;
&lt;img src=&#34;http://pic.yupoo.com/lavender/GRrP1D55/wSReB.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kami Solver</title>
      <link>https://bigheadghost.github.io/post/kamisolver/</link>
      <pubDate>Mon, 23 Jun 2014 12:11:27 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/kamisolver/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://pic.yupoo.com/lavender/GRriY7wp/medish.jpg&#34; alt=&#34;Kami&#34; /&gt;&lt;br /&gt;
Actually, all puzzles data are located in the &amp;ldquo;puzzles&amp;rdquo;  folder under the game directory, including classic group from A to E, and pays needed premium &amp;ldquo;5C1&amp;rdquo; and &amp;ldquo;Pat1&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;PuzzleData are stored in files such as SAL1_TwoSides.xml(Stage A Level 1). colours variable denotes the grid. gold, silver, bronze variables are the moves count to achieve these medals. The &amp;ldquo;solution&amp;rdquo; part, well, is the solution. Following computer world&amp;rsquo;s tradition, in each turn, x, y mean the column, row coordinates, both originating from 0.&lt;/p&gt;

&lt;p&gt;If solution is all your want, it&amp;rsquo;s done.&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Magic Griddlers Solver</title>
      <link>https://bigheadghost.github.io/post/magic-griddlers-solver/</link>
      <pubDate>Tue, 17 Jun 2014 12:53:53 +0800</pubDate>
      
      <guid>https://bigheadghost.github.io/post/magic-griddlers-solver/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>